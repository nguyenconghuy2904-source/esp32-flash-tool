"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[31,300],{3830:(t,e,i)=>{i.d(e,{n:()=>s});class s{getEraseSize(t,e){return e}}},7031:(t,e,i)=>{i.d(e,{ESP32C3ROM:()=>a});var s=i(3830);class a extends s.n{constructor(){super(...arguments),this.CHIP_NAME="ESP32-C3",this.IMAGE_CHIP_ID=5,this.EFUSE_BASE=0x60008800,this.MAC_EFUSE_REG=this.EFUSE_BASE+68,this.UART_CLKDIV_REG=0x3ff40014,this.UART_CLKDIV_MASK=1048575,this.UART_DATE_REG_ADDR=0x6000007c,this.FLASH_WRITE_SIZE=1024,this.BOOTLOADER_FLASH_OFFSET=0,this.FLASH_SIZES={"1MB":0,"2MB":16,"4MB":32,"8MB":48,"16MB":64},this.SPI_REG_BASE=0x60002000,this.SPI_USR_OFFS=24,this.SPI_USR1_OFFS=28,this.SPI_USR2_OFFS=32,this.SPI_MOSI_DLEN_OFFS=36,this.SPI_MISO_DLEN_OFFS=40,this.SPI_W0_OFFS=88}async getPkgVersion(t){let e=this.EFUSE_BASE+68;return await t.readReg(e+12)>>21&7}async getChipRevision(t){let e=this.EFUSE_BASE+68;return(await t.readReg(e+12)&1835008)>>18}async getMinorChipVersion(t){let e=this.EFUSE_BASE+68+20,i=await t.readReg(e)>>23&1,s=this.EFUSE_BASE+68+12;return(i<<3)+(await t.readReg(s)>>18&7)}async getMajorChipVersion(t){let e=this.EFUSE_BASE+68+20;return await t.readReg(e)>>24&3}async getChipDescription(t){let e=await this.getPkgVersion(t),i=await this.getMajorChipVersion(t),s=await this.getMinorChipVersion(t);return`${({0:"ESP32-C3 (QFN32)",1:"ESP8685 (QFN28)",2:"ESP32-C3 AZ (QFN32)",3:"ESP8686 (QFN24)"})[e]||"Unknown ESP32-C3"} (revision v${i}.${s})`}async getFlashCap(t){let e=this.EFUSE_BASE+68;return await t.readReg(e+12)>>27&7}async getFlashVendor(t){let e=this.EFUSE_BASE+68;return({1:"XMC",2:"GD",3:"FM",4:"TT",5:"ZBIT"})[(0|await t.readReg(e+16))&7]||""}async getChipFeatures(t){let e=["Wi-Fi","BLE"],i=await this.getFlashCap(t),s=await this.getFlashVendor(t),a={0:null,1:"Embedded Flash 4MB",2:"Embedded Flash 2MB",3:"Embedded Flash 1MB",4:"Embedded Flash 8MB"}[i];return null!==a&&e.push(`${void 0!==a?a:"Unknown Embedded Flash"} (${s})`),e}async getCrystalFreq(t){return 40}_d2h(t){let e=(+t).toString(16);return 1===e.length?"0"+e:e}async readMac(t){let e=await t.readReg(this.MAC_EFUSE_REG);e>>>=0;let i=await t.readReg(this.MAC_EFUSE_REG+4);i=i>>>0&65535;let s=new Uint8Array(6);return s[0]=i>>8&255,s[1]=255&i,s[2]=e>>24&255,s[3]=e>>16&255,s[4]=e>>8&255,s[5]=255&e,this._d2h(s[0])+":"+this._d2h(s[1])+":"+this._d2h(s[2])+":"+this._d2h(s[3])+":"+this._d2h(s[4])+":"+this._d2h(s[5])}getEraseSize(t,e){return e}}},9300:(t,e,i)=>{i.d(e,{ESP32C2ROM:()=>a});var s=i(7031);class a extends s.ESP32C3ROM{constructor(){super(...arguments),this.CHIP_NAME="ESP32-C2",this.IMAGE_CHIP_ID=12,this.EFUSE_BASE=0x60008800,this.MAC_EFUSE_REG=this.EFUSE_BASE+64,this.UART_CLKDIV_REG=0x60000014,this.UART_CLKDIV_MASK=1048575,this.UART_DATE_REG_ADDR=0x6000007c,this.XTAL_CLK_DIVIDER=1,this.FLASH_WRITE_SIZE=1024,this.BOOTLOADER_FLASH_OFFSET=0,this.FLASH_SIZES={"1MB":0,"2MB":16,"4MB":32,"8MB":48,"16MB":64},this.SPI_REG_BASE=0x60002000,this.SPI_USR_OFFS=24,this.SPI_USR1_OFFS=28,this.SPI_USR2_OFFS=32,this.SPI_MOSI_DLEN_OFFS=36,this.SPI_MISO_DLEN_OFFS=40,this.SPI_W0_OFFS=88}async getPkgVersion(t){let e=this.EFUSE_BASE+64;return await t.readReg(e+4)>>22&7}async getChipRevision(t){let e=this.EFUSE_BASE+64;return(await t.readReg(e+4)&3145728)>>20}async getChipDescription(t){let e=await this.getPkgVersion(t);return(0===e||1===e?"ESP32-C2":"unknown ESP32-C2")+(" (revision "+await this.getChipRevision(t))+")"}async getChipFeatures(t){return["Wi-Fi","BLE"]}async getCrystalFreq(t){let e,i=await t.readReg(this.UART_CLKDIV_REG)&this.UART_CLKDIV_MASK,s=t.transport.baudrate*i/1e6/this.XTAL_CLK_DIVIDER;return Math.abs((e=s>33?40:26)-s)>1&&t.info("WARNING: Unsupported crystal in use"),e}async changeBaudRate(t){26===await this.getCrystalFreq(t)&&t.changeBaud()}_d2h(t){let e=(+t).toString(16);return 1===e.length?"0"+e:e}async readMac(t){let e=await t.readReg(this.MAC_EFUSE_REG);e>>>=0;let i=await t.readReg(this.MAC_EFUSE_REG+4);i=i>>>0&65535;let s=new Uint8Array(6);return s[0]=i>>8&255,s[1]=255&i,s[2]=e>>24&255,s[3]=e>>16&255,s[4]=e>>8&255,s[5]=255&e,this._d2h(s[0])+":"+this._d2h(s[1])+":"+this._d2h(s[2])+":"+this._d2h(s[3])+":"+this._d2h(s[4])+":"+this._d2h(s[5])}getEraseSize(t,e){return e}}}}]);