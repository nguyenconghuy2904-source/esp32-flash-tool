"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[965],{3830:(e,t,s)=>{s.d(t,{n:()=>i});class i{getEraseSize(e,t){return t}}},5965:(e,t,s)=>{s.d(t,{ESP32ROM:()=>a});var i=s(3830);class a extends i.n{constructor(){super(...arguments),this.CHIP_NAME="ESP32",this.IMAGE_CHIP_ID=0,this.EFUSE_RD_REG_BASE=0x3ff5a000,this.DR_REG_SYSCON_BASE=0x3ff66000,this.UART_CLKDIV_REG=0x3ff40014,this.UART_CLKDIV_MASK=1048575,this.UART_DATE_REG_ADDR=0x60000078,this.XTAL_CLK_DIVIDER=1,this.FLASH_SIZES={"1MB":0,"2MB":16,"4MB":32,"8MB":48,"16MB":64},this.FLASH_WRITE_SIZE=1024,this.BOOTLOADER_FLASH_OFFSET=4096,this.SPI_REG_BASE=0x3ff42000,this.SPI_USR_OFFS=28,this.SPI_USR1_OFFS=32,this.SPI_USR2_OFFS=36,this.SPI_W0_OFFS=128,this.SPI_MOSI_DLEN_OFFS=40,this.SPI_MISO_DLEN_OFFS=44}async readEfuse(e,t){let s=this.EFUSE_RD_REG_BASE+4*t;return e.debug("Read efuse "+s),await e.readReg(s)}async getPkgVersion(e){let t=await this.readEfuse(e,3),s=t>>9&7;return s+((t>>2&1)<<3)}async getChipRevision(e){let t=await this.readEfuse(e,3),s=await this.readEfuse(e,5),i=await e.readReg(this.DR_REG_SYSCON_BASE+124);if(0!=(t>>15&1))if(0==(s>>20&1))return 1;else if(0!=(i>>31&1))return 3;else return 2;return 0}async getChipDescription(e){let t=["ESP32-D0WDQ6","ESP32-D0WD","ESP32-D2WD","","ESP32-U4WDH","ESP32-PICO-D4","ESP32-PICO-V3-02"],s="",i=await this.getPkgVersion(e),a=await this.getChipRevision(e),h=3==a;return 0!=(await this.readEfuse(e,3)&1)&&(t[0]="ESP32-S0WDQ6",t[1]="ESP32-S0WD"),h&&(t[5]="ESP32-PICO-V3"),s=i>=0&&i<=6?t[i]:"Unknown ESP32",h&&(0===i||1===i)&&(s+="-V3"),s+" (revision "+a+")"}async getChipFeatures(e){let t=["Wi-Fi"],s=await this.readEfuse(e,3);0==(2&s)&&t.push(" BT"),0!=(1&s)?t.push(" Single Core"):t.push(" Dual Core"),0!=(8192&s)&&(0!=(4096&s)?t.push(" 160MHz"):t.push(" 240MHz"));let i=await this.getPkgVersion(e);return -1!==[2,4,5,6].indexOf(i)&&t.push(" Embedded Flash"),6===i&&t.push(" Embedded PSRAM"),0!=(await this.readEfuse(e,4)>>8&31)&&t.push(" VRef calibration in efuse"),0!=(s>>14&1)&&t.push(" BLK3 partially reserved"),t.push(" Coding Scheme "+["None","3/4","Repeat (UNSUPPORTED)","Invalid"][3&await this.readEfuse(e,6)]),t}async getCrystalFreq(e){let t,s=await e.readReg(this.UART_CLKDIV_REG)&this.UART_CLKDIV_MASK,i=e.transport.baudrate*s/1e6/this.XTAL_CLK_DIVIDER;return Math.abs((t=i>33?40:26)-i)>1&&e.info("WARNING: Unsupported crystal in use"),t}_d2h(e){let t=(+e).toString(16);return 1===t.length?"0"+t:t}async readMac(e){let t=await this.readEfuse(e,1);t>>>=0;let s=await this.readEfuse(e,2);s>>>=0;let i=new Uint8Array(6);return i[0]=s>>8&255,i[1]=255&s,i[2]=t>>24&255,i[3]=t>>16&255,i[4]=t>>8&255,i[5]=255&t,this._d2h(i[0])+":"+this._d2h(i[1])+":"+this._d2h(i[2])+":"+this._d2h(i[3])+":"+this._d2h(i[4])+":"+this._d2h(i[5])}}}}]);