"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[538],{3830:(t,e,s)=>{s.d(e,{n:()=>i});class i{getEraseSize(t,e){return e}}},9538:(t,e,s)=>{s.d(e,{ESP8266ROM:()=>_});var i=s(3830);class _ extends i.n{constructor(){super(...arguments),this.CHIP_NAME="ESP8266",this.CHIP_DETECT_MAGIC_VALUE=[0xfff0c101],this.EFUSE_RD_REG_BASE=0x3ff00050,this.UART_CLKDIV_REG=0x60000014,this.UART_CLKDIV_MASK=1048575,this.XTAL_CLK_DIVIDER=2,this.FLASH_WRITE_SIZE=16384,this.BOOTLOADER_FLASH_OFFSET=0,this.UART_DATE_REG_ADDR=0,this.FLASH_SIZES={"512KB":0,"256KB":16,"1MB":32,"2MB":48,"4MB":64,"2MB-c1":80,"4MB-c1":96,"8MB":128,"16MB":144},this.SPI_REG_BASE=0x60000200,this.SPI_USR_OFFS=28,this.SPI_USR1_OFFS=32,this.SPI_USR2_OFFS=36,this.SPI_MOSI_DLEN_OFFS=0,this.SPI_MISO_DLEN_OFFS=0,this.SPI_W0_OFFS=64,this.getChipFeatures=async t=>{let e=["WiFi"];return await this.getChipDescription(t)=="ESP8285"&&e.push("Embedded Flash"),e}}async readEfuse(t,e){let s=this.EFUSE_RD_REG_BASE+4*e;return t.debug("Read efuse "+s),await t.readReg(s)}async getChipDescription(t){let e=await this.readEfuse(t,2);return(16&await this.readEfuse(t,0)|65536&e)!=0?"ESP8285":"ESP8266EX"}async getCrystalFreq(t){let e,s=await t.readReg(this.UART_CLKDIV_REG)&this.UART_CLKDIV_MASK,i=t.transport.baudrate*s/1e6/this.XTAL_CLK_DIVIDER;return Math.abs((e=i>33?40:26)-i)>1&&t.info("WARNING: Detected crystal freq "+i+"MHz is quite different to normalized freq "+e+"MHz. Unsupported crystal in use?"),e}_d2h(t){let e=(+t).toString(16);return 1===e.length?"0"+e:e}async readMac(t){let e=await this.readEfuse(t,0);e>>>=0;let s=await this.readEfuse(t,1);s>>>=0;let i=await this.readEfuse(t,3);i>>>=0;let _=new Uint8Array(6);return 0!=i?(_[0]=i>>16&255,_[1]=i>>8&255,_[2]=255&i):(s>>16&255)==0?(_[0]=24,_[1]=254,_[2]=52):(s>>16&255)==1?(_[0]=172,_[1]=208,_[2]=116):t.error("Unknown OUI"),_[3]=s>>8&255,_[4]=255&s,_[5]=e>>24&255,this._d2h(_[0])+":"+this._d2h(_[1])+":"+this._d2h(_[2])+":"+this._d2h(_[3])+":"+this._d2h(_[4])+":"+this._d2h(_[5])}getEraseSize(t,e){return e}}}}]);