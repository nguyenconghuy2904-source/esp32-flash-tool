import React, { useState } from 'react'

interface ConnectionCheck {
  name: string
  status: 'pending' | 'checking' | 'success' | 'error'
  message: string
  details?: string
}

interface ConnectionTroubleshooterProps {
  onClose: () => void
}

export default function ConnectionTroubleshooter({ onClose }: ConnectionTroubleshooterProps) {
  const [checks, setChecks] = useState<ConnectionCheck[]>([
    {
      name: 'WebSerial API Support',
      status: 'pending',
      message: 'Ki·ªÉm tra h·ªó tr·ª£ WebSerial API'
    },
    {
      name: 'HTTPS/Localhost',
      status: 'pending',
      message: 'Ki·ªÉm tra giao th·ª©c HTTPS'
    },
    {
      name: 'USB Device Access',
      status: 'pending',
      message: 'Ki·ªÉm tra quy·ªÅn truy c·∫≠p USB'
    },
    {
      name: 'ESP32 Driver',
      status: 'pending',
      message: 'Ki·ªÉm tra driver ESP32'
    },
    {
      name: 'Serial Port Available',
      status: 'pending',
      message: 'Ki·ªÉm tra c·ªïng serial'
    }
  ])

  const [isRunning, setIsRunning] = useState(false)

  const updateCheck = (index: number, status: ConnectionCheck['status'], message: string, details?: string) => {
    setChecks(prev => prev.map((check, i) =>
      i === index ? { ...check, status, message, details } : check
    ))
  }

  const runChecks = async () => {
    setIsRunning(true)

    // Check 1: WebSerial API Support
    updateCheck(0, 'checking', 'ƒêang ki·ªÉm tra WebSerial API...')
    await new Promise(resolve => setTimeout(resolve, 500))

    if ('serial' in navigator) {
      updateCheck(0, 'success', '‚úÖ WebSerial API ƒë∆∞·ª£c h·ªó tr·ª£')
    } else {
      updateCheck(0, 'error', '‚ùå WebSerial API kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£',
        'Vui l√≤ng d√πng Chrome, Edge, ho·∫∑c Opera. Firefox v√† Safari kh√¥ng h·ªó tr·ª£ WebSerial.')
    }

    // Check 2: HTTPS/Localhost
    updateCheck(1, 'checking', 'ƒêang ki·ªÉm tra giao th·ª©c...')
    await new Promise(resolve => setTimeout(resolve, 500))

    const isHttps = window.location.protocol === 'https:'
    const isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1'

    if (isHttps || isLocalhost) {
      updateCheck(1, 'success', '‚úÖ Ch·∫°y tr√™n HTTPS ho·∫∑c localhost')
    } else {
      updateCheck(1, 'error', '‚ùå C·∫ßn ch·∫°y tr√™n HTTPS ho·∫∑c localhost',
        'WebSerial ch·ªâ ho·∫°t ƒë·ªông tr√™n HTTPS. Vui l√≤ng truy c·∫≠p qua https:// ho·∫∑c ch·∫°y localhost.')
    }

    // Check 3: USB Device Access
    updateCheck(2, 'checking', 'ƒêang ki·ªÉm tra quy·ªÅn USB...')
    await new Promise(resolve => setTimeout(resolve, 500))

    try {
      // Try to request a port (this will show permission dialog)
      const port = await (navigator as any).serial.requestPort()
      if (port) {
        await port.close() // Close it immediately
        updateCheck(2, 'success', '‚úÖ Quy·ªÅn truy c·∫≠p USB ƒë∆∞·ª£c c·∫•p')
      } else {
        updateCheck(2, 'error', '‚ùå Kh√¥ng th·ªÉ truy c·∫≠p USB',
          'B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn truy c·∫≠p USB ho·∫∑c kh√¥ng c√≥ thi·∫øt b·ªã n√†o ƒë∆∞·ª£c ch·ªçn.')
      }
    } catch (error: any) {
      if (error.name === 'NotAllowedError') {
        updateCheck(2, 'error', '‚ùå Quy·ªÅn truy c·∫≠p USB b·ªã t·ª´ ch·ªëi',
          'B·∫°n c·∫ßn cho ph√©p quy·ªÅn truy c·∫≠p USB khi popup hi·ªán ra.')
      } else if (error.name === 'NotFoundError') {
        updateCheck(2, 'error', '‚ùå Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã USB',
          'Vui l√≤ng k·∫øt n·ªëi ESP32 v√† th·ª≠ l·∫°i. N·∫øu popup kh√¥ng hi·ªán, thi·∫øt b·ªã c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c nh·∫≠n di·ªán.')
      } else {
        updateCheck(2, 'error', '‚ùå L·ªói truy c·∫≠p USB',
          `L·ªói: ${error.message}`)
      }
    }

    // Check 4: ESP32 Driver
    updateCheck(3, 'checking', 'ƒêang ki·ªÉm tra driver ESP32...')
    await new Promise(resolve => setTimeout(resolve, 500))

    // This is a basic check - we can't really detect drivers from browser
    // But we can check if common ESP32 VID/PID are available
    updateCheck(3, 'success', '‚úÖ Driver ESP32 (CH340/CP2102) c·∫ßn ƒë∆∞·ª£c c√†i ƒë·∫∑t',
      'N·∫øu g·∫∑p l·ªói k·∫øt n·ªëi, h√£y c√†i driver CH340 ho·∫∑c CP2102 cho ESP32 c·ªßa b·∫°n.')

    // Check 5: Serial Port Available
    updateCheck(4, 'checking', 'ƒêang ki·ªÉm tra c·ªïng serial...')
    await new Promise(resolve => setTimeout(resolve, 500))

    try {
      const ports = await (navigator as any).serial.getPorts()
      if (ports && ports.length > 0) {
        updateCheck(4, 'success', `‚úÖ T√¨m th·∫•y ${ports.length} c·ªïng serial`)
      } else {
        updateCheck(4, 'error', '‚ùå Kh√¥ng t√¨m th·∫•y c·ªïng serial',
          'Vui l√≤ng k·∫øt n·ªëi ESP32 v√† l√†m m·ªõi trang. N·∫øu v·∫´n kh√¥ng th·∫•y, ki·ªÉm tra driver v√† c√°p USB.')
      }
    } catch (error) {
      updateCheck(4, 'error', '‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra c·ªïng serial',
        'Tr√¨nh duy·ªát c√≥ th·ªÉ kh√¥ng h·ªó tr·ª£ getPorts() ho·∫∑c c√≥ l·ªói b·∫£o m·∫≠t.')
    }

    setIsRunning(false)
  }

  const getStatusIcon = (status: ConnectionCheck['status']) => {
    switch (status) {
      case 'pending': return '‚è≥'
      case 'checking': return 'üîÑ'
      case 'success': return '‚úÖ'
      case 'error': return '‚ùå'
      default: return '‚ùì'
    }
  }

  const getStatusColor = (status: ConnectionCheck['status']) => {
    switch (status) {
      case 'success': return 'text-green-600'
      case 'error': return 'text-red-600'
      case 'checking': return 'text-blue-600'
      default: return 'text-gray-600'
    }
  }

  return (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          {/* Header */}
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-primary">üîß Ki·ªÉm tra k·∫øt n·ªëi ESP32</h2>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600 text-2xl"
            >
              ‚úï
            </button>
          </div>

          {/* Description */}
          <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <p className="text-blue-800 text-sm">
              üõ†Ô∏è C√¥ng c·ª• n√†y s·∫Ω ki·ªÉm tra c√°c y√™u c·∫ßu c·∫ßn thi·∫øt ƒë·ªÉ k·∫øt n·ªëi ESP32.
              H√£y ch·∫°y t·ª´ng b∆∞·ªõc ki·ªÉm tra ƒë·ªÉ x√°c ƒë·ªãnh v·∫•n ƒë·ªÅ.
            </p>
          </div>

          {/* Run Button */}
          <div className="mb-6">
            <button
              onClick={runChecks}
              disabled={isRunning}
              className="w-full bg-primary hover:bg-primary-dark disabled:opacity-50 disabled:cursor-not-allowed text-white px-6 py-3 rounded-lg font-medium transition-colors"
            >
              {isRunning ? 'üîÑ ƒêang ki·ªÉm tra...' : 'üöÄ Ch·∫°y ki·ªÉm tra k·∫øt n·ªëi'}
            </button>
          </div>

          {/* Checks List */}
          <div className="space-y-4">
            {checks.map((check, index) => (
              <div key={index} className="border border-gray-200 rounded-lg p-4">
                <div className="flex items-start space-x-3">
                  <span className={`text-lg ${getStatusColor(check.status)}`}>
                    {getStatusIcon(check.status)}
                  </span>
                  <div className="flex-1">
                    <h3 className="font-semibold text-primary mb-1">{check.name}</h3>
                    <p className={`text-sm ${getStatusColor(check.status)}`}>{check.message}</p>
                    {check.details && (
                      <details className="mt-2">
                        <summary className="text-xs text-gray-600 cursor-pointer hover:text-gray-800">
                          Chi ti·∫øt
                        </summary>
                        <p className="text-xs text-gray-700 mt-1 pl-4 border-l-2 border-gray-300">
                          {check.details}
                        </p>
                      </details>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Troubleshooting Tips */}
          <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
            <h3 className="text-yellow-800 font-semibold mb-2">üí° M·∫πo kh·∫Øc ph·ª•c:</h3>
            <ul className="text-yellow-700 text-sm space-y-1">
              <li>‚Ä¢ <strong>Kh√¥ng hi·ªán popup USB:</strong> D√πng Chrome/Edge/Opera, ch·∫°y HTTPS</li>
              <li>‚Ä¢ <strong>Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã:</strong> Nh·∫•n gi·ªØ BOOT khi c·∫Øm USB</li>
              <li>‚Ä¢ <strong>L·ªói driver:</strong> C√†i CH340/CP2102 driver cho ESP32</li>
              <li>‚Ä¢ <strong>Thi·∫øt b·ªã ƒëang d√πng:</strong> ƒê√≥ng Arduino IDE, PlatformIO</li>
              <li>‚Ä¢ <strong>C√°p USB k√©m:</strong> Th·ª≠ c√°p kh√°c, c·ªïng USB kh√°c</li>
            </ul>
          </div>

          {/* Action Buttons */}
          <div className="flex gap-3 mt-6">
            <button
              onClick={onClose}
              className="flex-1 bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-lg font-medium transition-colors"
            >
              ƒê√≥ng
            </button>
            <button
              onClick={() => window.open('http://zalo.me/0389827643', '_blank')}
              className="flex-1 bg-accent-blue hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
            >
              üì± H·ªó tr·ª£ Zalo
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}